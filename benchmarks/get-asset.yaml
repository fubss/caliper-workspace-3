test:
  name: get-asset
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the 'getAsset()' API method. Successive rounds create and
    retrieve assets of larger byteSize.
  workers:
    type: local
    number: 10
  rounds:
    - label: get-asset-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 100 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
            - 16000
            - 32000
            - 64000
          assets: 1000
          byteSize: 100
          consensus: false
    - label: get-asset-evaluate-1000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 1000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          assets: 1000
          byteSize: 1000
          consensus: false
    - label: get-asset-evaluate-2000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 2000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 2000
          assets: 1000
          consensus: false
    - label: get-asset-evaluate-4000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 4000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 4000
          assets: 1000
          consensus: false
    - label: get-asset-evaluate-8000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 8000
          assets: 1000
          consensus: false
    - label: get-asset-evaluate-16000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 16000
        bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 16000
          assets: 1000
          consensus: false
    - label: get-asset-evaluate-32000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 32000
        bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 32000
          assets: 1000
          consensus: false
    - label: get-asset-evaluate-64000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 64000
        bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: ./workload/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 64000
          assets: 1000
          consensus: false
##    - label: get-asset-evaluate-8000-2
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 8000 bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 8000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-16000-2
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 16000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 16000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-32000-2
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 32000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 32000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-64000-2
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 64000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 64000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-64000-3
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 64000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 64000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-64000-4
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 64000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 64000
#          assets: 1000
#          consensus: false
#    - label: get-asset-evaluate-64000-5
#      description: >-
#        Test an evaluateTransaction() Gateway method against the NodeJS
#        `fixed-asset` Smart Contract method named `getAsset`. This method
#        performs a getState on an item that matches an asset of size 64000
#        bytes.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-load
#        opts:
#          transactionLoad: 50
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 64000
#          assets: 1000
#          consensus: false
#
###    - label: get-asset-evaluate-8000-fixed-tps
###      description: >-
##        Test an evaluateTransaction() Gateway method against the NodeJS
##        `fixed-asset` Smart Contract method named `getAsset`. This method
##        performs a getState on an item that matches an asset of size 8000 bytes
##        at a fixed TPS.
#      chaincodeID: fixed-asset
#      txDuration: 300
#      rateControl:
#        type: fixed-rate
#        opts:
#          tps: 350
#      workload:
#        module: ./workload/get-asset.js
#        arguments:
#          chaincodeID: fixed-asset
#          noSetup: true
#          byteSize: 8000
#          assets: 1000
#          consensus: false
monitors:
    resource:
     - module: process
       options:
         interval: 3
         processes: [{ command: '/usr/bin/node', arguments: '/home/ivanl/go/src/github.com/hyperledger/caliper-workspace-3/node_modules/.bin/caliper', multiOutput: 'avg' }]
     - module: prometheus
       options:
         interval: 5
         url: "http://localhost:9090"
         metrics:
           include: [dev-.*, couch, peer, orderer]
           queries:
           - name: Avg Memory (MB)
             query: 'sum(container_memory_rss{name=~".+"}) by (name)'
             step: 10
             label: name
             statistic: avg
             multiplier: 0.000001
           - name:   CPU (%)
             query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name) / ignoring(name) group_left sum(machine_cpu_cores)
             step: 10
             label: name
             statistic: avg
             multiplier: 100
           - name: Network In (MB)
             query: sum(rate(container_network_receive_bytes_total[1m])) by (name)
             step: 10
             label: name
             statistic: sum
             multiplier: 0.000001
           - name: Network Out (MB)
             query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
             step: 10
             label: name
             statistic: sum
             multiplier: 0.000001
           - name: Disc Write (MB)
             query: sum(rate(container_fs_writes_bytes_total[1m])) by (name)
             step: 10
             label: name
             statistic: sum
             multiplier: 0.000001
           - name: Disc Read (MB)
             query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
             step: 10
             label: name
             statistic: sum
             multiplier: 0.000001
         charting:
           polar:
             metrics: [all]